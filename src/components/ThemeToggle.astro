---
import SunIcon from './icons/Sun.astro';
import MoonIcon from './icons/Moon.astro';
import SystemIcon from './icons/System.astro';

let THEMES = ['Claro', 'Oscuro', 'Sistema'];
---

<div class='relative ml-1 mr-1'>
  <button
    transition:persist
    id='theme-toggle-btn'
    class='appearance-none border-none flex hover:scale-125 transition'
  >
    <span class='sr-only'>Elige el tema</span>
    <SunIcon id='light' class='theme-toggle-icon size-5 transition-all' />
    <MoonIcon
      id='dark'
      class='theme-toggle-icon absolute size-5 transition-all'
    />
    <SystemIcon
      id='system'
      class='theme-toggle-icon absolute size-5 transition-all'
    />
  </button>
  <div
    transition:persist
    id='themes-menu'
    class='absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-neutral-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md'
  >
    <ul class='theme-menu-items'>
      {
        THEMES.map((theme) => (
          <li class='themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm'>
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMediaResult = window.matchMedia('(prefers-color-scheme: dark)');
  const themesMenu = document.getElementById('themes-menu');

  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined') {
      return localStorage.getItem('theme') ?? 'system';
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll('.theme-toggle-icon').forEach((element) => {
      element.style.scale = element.id === themePreference ? '1' : '0';
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMediaResult.addEventListener('change', updateTheme);
    remove = () => {
      matchMediaResult.removeEventListener('change', updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === 'dark' ||
      (themePreference === 'system' && matchMediaResult.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
  };

  updateTheme();

  document.addEventListener('click', () => themesMenu.classList.remove('open'));

  document.getElementById('theme-toggle-btn').addEventListener('click', (e) => {
    e.stopPropagation();
    const currentLang = document.documentElement.getAttribute('lang');
    const themesMenuOptions = document.querySelectorAll('.themes-menu-option');
    for (let i = 0; i <= 2; i++) {
      if (currentLang === 'en') {
        const THEMES = ['Light', 'Dark', 'System'];
        themesMenuOptions[i].textContent = THEMES[i];
      } else {
        const THEMES = ['Claro', 'Oscuro', 'Sistema'];
        themesMenuOptions[i].textContent = THEMES[i];
      }
    }
    const isClosed = !themesMenu.classList.contains('open');
    themesMenu.classList[isClosed ? 'add' : 'remove']('open');
    if (themesMenu.classList.contains('open')) {
      document.querySelector('#dropdown').classList.remove('visible');
      document.querySelector('#dropdownSmartphone').classList.remove('visible');
    }
  });

  document.querySelectorAll('.themes-menu-option').forEach((element) => {
    element.addEventListener('click', (e) => {
      const currentLang = document.documentElement.getAttribute('lang');
      let option = e.target.textContent;

      if (currentLang === 'es' && option === 'Claro') {
        option = 'light';
        localStorage.setItem('theme', option);
        updateTheme();
      } else if (currentLang === 'es' && option === 'Oscuro') {
        option = 'dark';
        localStorage.setItem('theme', option);
        updateTheme();
      } else if (currentLang === 'es' && option === 'Sistema') {
        option = 'system';
        localStorage.setItem('theme', option);
      }

      if (currentLang !== 'es') {
        localStorage.setItem('theme', e.target.innerText.toLowerCase().trim());
        updateTheme();
      }
    });
  });

  document.addEventListener('astro:after-swap', () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  });
</script>
